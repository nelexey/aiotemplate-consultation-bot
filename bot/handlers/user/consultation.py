from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

from bot.database.methods.read import get_available_slots, get_slot_by_id, get_user_bookings, check_user_booking_limit
from bot.database.methods.update import book_slot, cancel_booking, release_slot
from bot.database.methods.read import get_user_by_chat_id
from bot.keyboards.inline.consultation import (
    create_slots_keyboard,
    create_confirm_keyboard,
    create_bookings_keyboard,
    create_booking_details_keyboard,
    get_no_bookings_keyboard,
    get_success_booking_keyboard
)
from bot.keyboards.inline.menu import get_back_to_menu_keyboard
from bot.misc.env import settings
from bot.middlewares.throttling import AdminMessageThrottlingMiddleware
from bot.states.consultation import ConsultationStates
from bot.services.notifications import notify_admins_booking_cancelled

consultation_router = Router()
consultation_router.message.middleware(AdminMessageThrottlingMiddleware(cooldown_minutes=30))

@consultation_router.message(Command("schedule"))
async def show_schedule(message: Message, edit: bool = False):
    from_date = datetime.now()
    to_date = from_date + timedelta(days=14)
    
    available_slots = get_available_slots(from_date, to_date)
    if not available_slots:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏."
        if edit:
            await message.edit_text(text)
        else:
            await message.answer(text)
        return
    
    keyboard = await create_slots_keyboard(available_slots, page=1)
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:"
    if edit:
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)

@consultation_router.callback_query(F.data.startswith("book_"))
async def process_booking(callback: CallbackQuery):
    slot_id = int(callback.data.split("_")[1])
    keyboard = await create_confirm_keyboard(slot_id)
    await callback.message.edit_text(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:",
        reply_markup=keyboard
    )

@consultation_router.callback_query(F.data.startswith("confirm_"))
async def confirm_booking(callback: CallbackQuery):
    slot_id = int(callback.data.split("_")[1])
    user = get_user_by_chat_id(callback.from_user.id)
    
    if not user:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å /start")
        return
    
    if not check_user_booking_limit(user.id, settings.BOOKING_LIMIT):
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {settings.BOOKING_LIMIT} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
        )
        return
        
    if book_slot(slot_id, user.id):
        slot = get_slot_by_id(slot_id)
        time_until = slot.datetime - datetime.now()
        
        keyboard = get_success_booking_keyboard()
        await callback.message.edit_text(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!",
            reply_markup=keyboard
        )
        
        if time_until <= timedelta(hours=1):
            minutes_left = int(time_until.total_seconds() / 60)
            await callback.message.answer(
                f"‚ö°Ô∏è –í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω—É—Ç, "
                f"–≤ {slot.datetime.strftime('%H:%M')}!"
            )
    else:
        await callback.message.edit_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç.")

@consultation_router.message(Command("my_bookings"))
async def show_my_bookings(message: Message, edit: bool = False):
    user = get_user_by_chat_id(message.chat.id)
    if not user:
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å /start"
        if edit:
            await message.edit_text(text)
        else:
            await message.answer(text)
        return
        
    bookings = get_user_bookings(user.id)
    active_bookings = len(bookings)
    
    if not bookings:
        text = (f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø–∏—Å–µ–π: {settings.BOOKING_LIMIT}")
        keyboard = get_no_bookings_keyboard()
        if edit:
            await message.edit_text(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
        return
    
    keyboard = await create_bookings_keyboard(bookings, page=1)
    
    text = f"üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ({active_bookings}/{settings.BOOKING_LIMIT}):"
    if edit:
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)

@consultation_router.callback_query(F.data.startswith("booking_details_"))
async def show_booking_details(callback: CallbackQuery):
    booking_id = int(callback.data.split("_")[2])
    slot = get_slot_by_id(booking_id)
    
    if not slot:
        await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
        
    time_until = slot.datetime - datetime.now()
    hours_left = int(time_until.total_seconds() / 3600)
    
    if hours_left < 1:
        time_info = f"—á–µ—Ä–µ–∑ {int(time_until.total_seconds() / 60)} –º–∏–Ω—É—Ç"
    else:
        time_info = f"—á–µ—Ä–µ–∑ {hours_left} —á–∞—Å–æ–≤"
    
    keyboard = await create_booking_details_keyboard(booking_id)
    await callback.message.edit_text(
        f"üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è {slot.datetime.strftime('%d.%m.%Y %H:%M')}\n"
        f"‚è≥ –ù–∞—á–Ω–µ—Ç—Å—è {time_info}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@consultation_router.callback_query(F.data.startswith("cancel_booking_"))
async def process_booking_cancellation(callback: CallbackQuery):
    booking_id = int(callback.data.split("_")[2])
    user = get_user_by_chat_id(callback.from_user.id)
    slot = get_slot_by_id(booking_id)
    
    if not slot:
        await callback.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
        
    client_info = f"@{user.username}" if user.username else f"ID: {user.chat_id}"
    time_until = slot.datetime - datetime.now()
    
    # –ï—Å–ª–∏ –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤ - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
    success = release_slot(booking_id) if time_until > timedelta(hours=24) else cancel_booking(booking_id)
    
    if success:
        await notify_admins_booking_cancelled(callback.bot, slot.datetime, client_info)
        
        bookings = get_user_bookings(user.id)
        if bookings:
            keyboard = await create_bookings_keyboard(bookings, page=1)
            await callback.message.edit_text(
                f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
                f"üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ({len(bookings)}/{settings.BOOKING_LIMIT}):",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
                f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø–∏—Å–µ–π: {settings.BOOKING_LIMIT}"
            )
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")

@consultation_router.callback_query(F.data == "back_to_bookings")
async def back_to_bookings_list(callback: CallbackQuery):
    user = get_user_by_chat_id(callback.from_user.id)
    bookings = get_user_bookings(user.id)
    keyboard = await create_bookings_keyboard(bookings, page=1)
    
    await callback.message.edit_text(
        f"üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ({len(bookings)}/{settings.BOOKING_LIMIT}):",
        reply_markup=keyboard
    )

@consultation_router.callback_query(F.data.startswith("bookings_page_"))
async def process_bookings_page(callback: CallbackQuery):
    page = int(callback.data.split("_")[2])
    user = get_user_by_chat_id(callback.from_user.id)
    bookings = get_user_bookings(user.id)
    
    keyboard = await create_bookings_keyboard(bookings, page=page)
    await callback.message.edit_reply_markup(reply_markup=keyboard) 

@consultation_router.callback_query(F.data.startswith("cancel_"))
async def cancel_booking_creation(callback: CallbackQuery):
    from_date = datetime.now()
    to_date = from_date + timedelta(days=14)
    
    available_slots = get_available_slots(from_date, to_date)
    keyboard = await create_slots_keyboard(available_slots, page=1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
        reply_markup=keyboard
    ) 

@consultation_router.callback_query(F.data.startswith("write_admin_"))
async def process_write_admin(callback: CallbackQuery, state: FSMContext):
    booking_id = int(callback.data.split("_")[2])
    slot = get_slot_by_id(booking_id)
    
    if not slot:
        await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
        
    await state.update_data(booking_id=booking_id)
    await state.set_state(ConsultationStates.waiting_for_message)
    
    await callback.message.edit_text(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞—à–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
    )

@consultation_router.message(StateFilter(ConsultationStates.waiting_for_message))
async def process_admin_message(message: Message, state: FSMContext):
    data = await state.get_data()
    booking_id = data.get("booking_id")
    slot = get_slot_by_id(booking_id)
    
    if not slot:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
        
    user_message = message.text
    user = message.from_user
    client_info = f"{user.first_name}"
    if user.last_name:
        client_info += f" {user.last_name}"
    if user.username:
        client_info += f" (@{user.username})"
    
    for admin_id in settings.admin_ids:
        try:
            await message.bot.send_message(
                admin_id,
                f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {client_info}\n"
                f"üìÖ –°–ª–æ—Ç: {slot.datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{user_message}"
            )
        except Exception as e:
            print(f"Error sending message to admin {admin_id}: {str(e)}")
    
    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
    await state.clear()
    
    keyboard = await create_booking_details_keyboard(booking_id)
    await message.answer(
        f"üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è {slot.datetime.strftime('%d.%m.%Y %H:%M')}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    ) 