import asyncio
from datetime import datetime, timedelta, UTC
from typing import Optional

from bot.services.yookassa import YooKassaService
from bot.database.methods.update import update_payment_status, update_slot_status
from bot.database.methods.read import get_payment_by_id, get_slot_by_id, get_user
from bot.misc.env import settings

async def check_payment_status_loop(
    payment_id: str,
    slot_id: int,
    chat_id: int,
    bot,
    timeout_minutes: int = 10
) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞.
    
    Args:
        payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
        slot_id: ID —Å–ª–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        timeout_minutes: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
    """
    start_time = datetime.now(UTC)
    yookassa_service = YooKassaService()
    
    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
        if datetime.now(UTC) - start_time > timedelta(minutes=timeout_minutes):
            # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
            await bot.send_message(
                chat_id,
                "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.\n"
                "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞
            update_slot_status(slot_id, 'available')
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            update_payment_status(payment_id, 'expired', None)
            break

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment = await yookassa_service.check_payment(payment_id)
            status = payment.status

            if status == 'succeeded':
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                payment_info = get_payment_by_id(payment_id)
                if not payment_info:
                    print(f"Payment {payment_id} not found in database")
                    break

                # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
                update_slot_status(slot_id, 'booked', client_id=payment_info.user_id)
                update_payment_status(payment_id, status, datetime.now(UTC))
                
                slot = get_slot_by_id(slot_id)
                await bot.send_message(
                    chat_id,
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
                    f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {slot.datetime.strftime('%d.%m.%Y %H:%M')}"
                )
                break
                
            elif status == 'canceled':
                # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
                update_slot_status(slot_id, 'available')
                update_payment_status(payment_id, status, None)
                
                await bot.send_message(
                    chat_id,
                    "‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n"
                    "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
                )
                break
                
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤—Å–µ –µ—â–µ pending, –∂–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
            await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            print(f"Error checking payment {payment_id}: {str(e)}")
            await asyncio.sleep(30)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –∂–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ 